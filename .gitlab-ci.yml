stages:
  - prepare
  - sast
  - build

variables:
  CACHE_FALLBACK_KEY: "main"
  CMAKE_BUILD_TYPE: "Release"
  # This variable has to be overridden to allow caching of conan packages, which must be updated the project dir to get cached.  This is where conan will look for the `.conan` directory
  CONAN_USER_HOME: "$CI_PROJECT_DIR"
  CONAN_USERNAME: "gitlab-ci"
  CONAN_REFERENCE: "advanced-flex-server/0.9"
  CONAN_CHANNEL: "gitlab-ci"
  CONAN_UPLOAD: "https://systemicai.jfrog.io/artifactory/api/conan/afs-http@True@systemicai-afshttp"
  CONAN_REMOTE: "https://systemicai.jfrog.io/artifactory/api/conan/afs-http@True@systemicai-afshttp"
  # These 4 variables are tightly coupled and change with the compiler version used
  LLVM_VERSION: "11"
  CC: "clang"
  CXX: "clang++"
  CXX_CONTAINER: "registry.gitlab.com/k8s.makerlabs.us/build-cxx:ubi8-clang-${LLVM_VERSION}"
  CXX_FLAGS: "-std=c++20 -stdlib=libc++"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
  # Don't just cache $CONAN_USER_HOME because that includes credentials (and complicates scripts)
  - "$CONAN_USER_HOME/.conan/data"

.build-template: &build-template
  tags: 
  - cpp
  before_script:
  - pip install --upgrade conan conan_package_tools
  - conan profile new default --detect
  - conan profile show default
  - conan user
  - conan remote add systemicai-afshttp https://systemicai.jfrog.io/artifactory/api/conan/afs-http
  #- mkdir -p ~/bin
  #- sudo ln -fs $(which clang-${LLVM_VERSION}) /usr/local/bin/clang
  #- sudo ln -fs $(which clang++-${LLVM_VERSION}) /usr/local/bin/clang++
  #- sudo ln -fs $(which llvm-cov-${LLVM_VERSION}) /usr/local/bin/llvm-cov
  #- sudo ln -fs $(which llvm-profdata-${LLVM_VERSION}) /usr/local/bin/llvm-profdata
  # These two env vars are set in the CICD variables in gitlab which are only available on protected branches - if they are empty we are on a branch that isn't "protected" - e.g. is not meant to be published - probably a feature or merge request
  - '[[ ! -z "${CONAN_PASSWORD}" ]] && conan user -r systemicai-afshttp -p "${CONAN_PASSWORD}" "${CONAN_LOGIN_USERNAME}"'

dependencies:
  stage: prepare
  image: ${CXX_CONTAINER}
  script:
  - mkdir -p build
  - pushd build
  - cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} ..
  - make dependencies # Populates the cache directory with built libraries for boost, etc
  - popd # build
  <<: *build-template

# The value add of this stage is pretty questionable since cppcheck is also run in the main build
#cppcheck:
#  image: ${CXX_CONTAINER}
#  stage: sast
#  script:
#  - mkdir -p build
#  - pushd build
#  - cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} ..
#  - make cppcheck
#  - popd # build
#  <<: *build-template

clang:
  artifacts:
    reports:
      junit: build/unit-tests.report.xml
    paths:
      - build/scan-build
      - build/coverage
      - build/dependencies.html
      - dist
  stage: build
  image: ${CXX_CONTAINER}
  script:
  #  - sudo apt update
  #- sudo apt install clang-tools-${LLVM_VERSION}
  #- sudo ln -fs $(which scan-build-${LLVM_VERSION}) /usr/local/bin/scan-build
  - mkdir -p build
  - pushd build
  - cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} ..
  - scan-build -o scan-build/reports make -j 10
  - popd # build
  <<: *build-template
